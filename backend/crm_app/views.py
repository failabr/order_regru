from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework import viewsets, permissions
from .models import Order, UserProfile, OrderAttachment, Organization, FurnitureType
from .serializers import OrderSerializer, OrderAttachmentSerializer, FurnitureTypeSerializer
from django.contrib.auth.models import User
from rest_framework import status
from rest_framework.response import Response
from datetime import timedelta, datetime
from django.http import FileResponse, Http404
import os
from django.conf import settings
from urllib.parse import quote as urlquote, unquote
from django.utils.timezone import now
from django.db.utils import IntegrityError
from django.views.decorators.csrf import csrf_exempt
import logging
from django.db.models import Q 
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes
from django.contrib.auth.tokens import default_token_generator
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_decode
from django.utils.encoding import force_str
from django.contrib.auth.tokens import default_token_generator
from django.shortcuts import redirect, render
from django.contrib.auth.models import User
from django.core.mail import send_mail, BadHeaderError
from django.contrib.auth import get_user_model
from django.conf import settings
from django.contrib.auth import authenticate
import requests
from rest_framework.authtoken.models import Token
from django.core.mail import send_mail
from django.conf import settings
from rest_framework.decorators import api_view, parser_classes, permission_classes
from rest_framework.parsers import MultiPartParser, FormParser, JSONParser
from rest_framework.decorators import action
from django.core.mail import EmailMessage
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.utils.encoding import force_str
from django.utils.http import urlsafe_base64_decode
from django.core.files.base import ContentFile

from urllib.parse import urlparse, unquote
import logging





logger = logging.getLogger(__name__)





class OrderViewSet(viewsets.ModelViewSet):
    """
    ViewSet –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ (Order).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ create, retrieve, update, partial_update, delete, list.
    """

    queryset = Order.objects.all()
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser]

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not self.request.user.is_authenticated:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π QuerySet")
            return Order.objects.none()

        user = self.request.user
        user_profile = UserProfile.objects.filter(user=user).first()
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_profile}")
        if user_profile:
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {user_profile}")
        else:
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if user_profile and user_profile.organization:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {user_profile.organization}")
            if user_profile.role == 'owner':
                # –í–ª–∞–¥–µ–ª–µ—Ü ‚Äî –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ
                orders = Order.objects.filter(
                    Q(organization=user_profile.organization) |
                    Q(created_by=user)
                ).distinct()
                logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü {user.username}; –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {orders.count()}")
                return orders
            else:
                # –ú–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –µ–º—É –∑–∞–∫–∞–∑—ã
                orders = Order.objects.filter(
                    Q(created_by=user) | Q(assigned_to=user)
                ).distinct()
                logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user.username}; –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {orders.count()}")
                return orders
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
            orders = Order.objects.filter(created_by=user)
            logger.info(f"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª {user.username}; –∑–∞–∫–∞–∑–æ–≤: {orders.count()}")
            return orders

    def create(self, request, *args, **kwargs):
        user = request.user
        user_profile = UserProfile.objects.get(user=user)
        serializer = self.get_serializer(data=request.data, context={"request": request})
        if not serializer.is_valid():
            logger.warning("‚ùå –û—à–∏–±–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: %s", serializer.errors)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        if user_profile.role != 'owner':
            serializer.validated_data.pop('assigned_to', None)

        self.perform_create(serializer)
        return Response(OrderSerializer(serializer.instance).data, status=status.HTTP_201_CREATED)

    def perform_create(self, serializer):
        user = self.request.user
        user_profile = UserProfile.objects.get(user=user)
        organization = user_profile.organization if user_profile.organization else None

        if user_profile.role != 'owner':
            serializer.validated_data.pop('assigned_to', None)

        if 'order_number' in self.request.data and self.request.data['order_number']:
            order_number = serializer.validated_data.get('order_number')
            order = serializer.save(created_by=user, organization=organization, order_number=order_number)
        else:
            order = serializer.save(created_by=user, organization=organization)

        files = self.request.FILES.getlist("attachments")
        for file in files:
            OrderAttachment.objects.create(order=order, file=file)

    def perform_update(self, serializer):
        user = self.request.user
        user_profile = UserProfile.objects.get(user=user)

        if user_profile.role != 'owner':
            serializer.validated_data.pop('assigned_to', None)

        order = serializer.save()

        files = self.request.FILES.getlist("attachments")
        for file in files:
            try:
                OrderAttachment.objects.create(order=order, file=file)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file.name}: {e}", exc_info=True)

    @action(detail=False, methods=['post'], url_path='update-furniture')
    @action(detail=False, methods=["post"], url_path="update-furniture")
    def update_furniture(self, request):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã")
        
        try:
            if 'file' not in request.FILES:
                logger.error("‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ")
                return Response({'error': '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'}, status=status.HTTP_400_BAD_REQUEST)

            order_number = request.data.get('order_number')
            original_file_url = request.data.get('original_file_url')

            if not order_number or not original_file_url:
                logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ URL –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                return Response({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ URL –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞'}, status=status.HTTP_400_BAD_REQUEST)

            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ URL
            parsed = urlparse(original_file_url)
            file_path = parsed.path.replace('/media/', '')  # –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ /media/, –∞ –Ω–µ attachments
            file_path = unquote(file_path)

            if not default_storage.exists(file_path):
                logger.error(f"‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return Response({'error': '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)

            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–æ–≤—ã–º
            new_file = request.FILES['file']
            logger.info(f"üíæ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")
            default_storage.delete(file_path)
            default_storage.save(file_path, ContentFile(new_file.read()))
            logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {file_path}")

            return Response({
                'success': True,
                'message': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω',
                'file_path': file_path
            })

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
            return Response({
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class OrderAttachmentViewSet(viewsets.ModelViewSet):
    queryset = OrderAttachment.objects.all()
    serializer_class = OrderAttachmentSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return OrderAttachment.objects.filter(order__created_by=self.request.user)

@api_view(["POST"])
@permission_classes([AllowAny])
def register_user(request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email"""
    username = request.data.get("username")
    email = request.data.get("email")
    password = request.data.get("password")
    confirm_password = request.data.get("confirm_password")
    recaptcha_token = request.data.get("recaptcha")

    if not username or not email or not password or not confirm_password:
        return Response({"error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"}, status=status.HTTP_400_BAD_REQUEST)

    if password != confirm_password:
        return Response({"error": "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"}, status=status.HTTP_400_BAD_REQUEST)

    if len(password) < 8:
        return Response({"error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤"}, status=status.HTTP_400_BAD_REQUEST)

    if User.objects.filter(username=username).exists():
        return Response({"error": "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç"}, status=status.HTTP_400_BAD_REQUEST)

    if User.objects.filter(email=email).exists():
        return Response({"error": "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}, status=status.HTTP_400_BAD_REQUEST)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if not settings.DEBUG or recaptcha_token != 'development_mode':
        recaptcha_secret = settings.RECAPTCHA_PRIVATE_KEY
        recaptcha_response = requests.post(
            "https://www.google.com/recaptcha/api/siteverify",
            data={"secret": recaptcha_secret, "response": recaptcha_token}
        )
        recaptcha_result = recaptcha_response.json()
        if not recaptcha_result.get("success"):
            return Response({"error": "–û—à–∏–±–∫–∞ reCAPTCHA."}, status=status.HTTP_400_BAD_REQUEST)

    # ‚õî –°–æ–∑–¥–∞—ë–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.objects.create_user(username=username, email=email, password=password)
    user.is_active = False
    user.save()
    UserProfile.objects.get_or_create(user=user)

    try:
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        token = default_token_generator.make_token(user)
        activation_link = f"{settings.FRONTEND_URL}/activate/{uid}/{token}/"

        subject = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –Ω–∞ ORDIO"
        message = render_to_string("emails/activation_email.html", {
            "username": user.username,
            "activation_link": activation_link,
        })

        send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [email])

    except BadHeaderError:
        return Response({"error": "–û—à–∏–±–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—á—Ç—ã"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", str(e))
        return Response({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    return Response({"message": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."}, status=status.HTTP_201_CREATED)


@api_view(["GET"])
@permission_classes([AllowAny])
def activate_user(request, uidb64, token):
    print(f"üì• –ê–∫—Ç–∏–≤–∞—Ü–∏—è uid: {uidb64}")
    print(f"üì• token: {token}")
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
        print(f"üîé –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}, is_active={user.is_active}")
    except (TypeError, ValueError, OverflowError, User.DoesNotExist):
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ uid –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return Response({"error": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"}, status=400)

    if user.is_active:
        return Response({"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}, status=200)

    if default_token_generator.check_token(user, token):
        user.is_active = True
        user.save()
        print("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return Response({"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}, status=200)
    else:
        print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return Response({"error": "–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"}, status=400)



@api_view(["POST"])
@permission_classes([AllowAny])
def login_view(request):
    """üîê –í—Ö–æ–¥ —Å reCAPTCHA –¥–ª—è –≤–µ–±–∞ –∏ –±–µ–∑ –Ω–µ—ë –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    username = request.data.get("username")
    password = request.data.get("password")
    recaptcha_token = request.data.get("recaptcha")

    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}")

    if not all([username, password]):
        return Response({"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã."}, status=status.HTTP_400_BAD_REQUEST)

    # üîç –û–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    user_agent = request.headers.get('User-Agent', '').lower()
    is_mobile_client = 'reactnative' in user_agent or 'okhttp' in user_agent or 'ordioapp' in user_agent \
                   or recaptcha_token == 'skip_for_mobile'

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA –¥–ª—è –≤–µ–±–∞ (–µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ mobile –∏–ª–∏ dev)
    if not is_mobile_client:
        if not recaptcha_token:
            return Response({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω reCAPTCHA."}, status=status.HTTP_400_BAD_REQUEST)

        recaptcha_secret = settings.RECAPTCHA_PRIVATE_KEY
        try:
            recaptcha_response = requests.post(
                "https://www.google.com/recaptcha/api/siteverify",
                data={"secret": recaptcha_secret, "response": recaptcha_token}
            )
            recaptcha_result = recaptcha_response.json()
            if not recaptcha_result.get("success"):
                logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA")
                return Response({"error": "–û—à–∏–±–∫–∞ reCAPTCHA."}, status=status.HTTP_400_BAD_REQUEST)
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google reCAPTCHA: {e}")
            return Response({"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA."}, status=status.HTTP_400_BAD_REQUEST)

    # üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    try:
        user = User.objects.get(username=username)
    except User.DoesNotExist:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {username}")
        return Response({"non_field_errors": ["–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"]}, status=status.HTTP_400_BAD_REQUEST)

    if not user.check_password(password):
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        return Response({"non_field_errors": ["–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"]}, status=status.HTTP_400_BAD_REQUEST)

    if not user.is_active:
        logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {username}")
        return Response({
            "error": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            "resend": True,
            "username": user.username,
            "email": user.email
        }, status=status.HTTP_403_FORBIDDEN)

    # üé´ –¢–æ–∫–µ–Ω
    token, _ = Token.objects.get_or_create(user=user)
    logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {username}")
    return Response({"token": token.key}, status=status.HTTP_200_OK)


@api_view(["POST"])
@permission_classes([AllowAny])
def resend_activation_email(request):
    email = request.data.get("email")

    try:
        user = User.objects.get(email=email)
        if user.is_active:
            return Response({"message": "–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}, status=400)

        uid = urlsafe_base64_encode(force_bytes(user.pk))
        token = default_token_generator.make_token(user)
        activation_link = f"{settings.FRONTEND_URL}/activate/{uid}/{token}/"

        subject = "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"
        message = render_to_string("emails/activation_email.html", {
            "username": user.username,
            "activation_link": activation_link,
        })

        send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [email])
        return Response({"message": "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ"}, status=200)

    except User.DoesNotExist:
        return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)



"""–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é"""
@api_view(["POST"])
@permission_classes([IsAuthenticated])
def create_organization(request):
    try:
        user = request.user
        print(f"üîπ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç: {user.username}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏
        profile = UserProfile.objects.get(user=user)
        if profile.organization is not None:
            return Response(
                {"error": "–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ 1 –∞–∫–∫–∞—É–Ω—Ç"},
                status=status.HTTP_400_BAD_REQUEST
            )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        name = request.data.get("name")
        if not name:
            return Response({"error": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"}, status=status.HTTP_400_BAD_REQUEST)

        # –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–∞–Ω–∏—é
        organization = Organization.objects.create(name=name, owner=user)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile.organization = organization
        profile.role = 'owner'
        profile.save()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        updated_count = Order.objects.filter(created_by=user, organization__isnull=True).update(organization=organization)
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {updated_count}")

        print(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {name} | ID: {organization.id} | –ö–æ–¥: {organization.code}")
        return Response({"message": "–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞", "id": organization.id, "code": organization.code}, status=status.HTTP_201_CREATED)

    except IntegrityError as e:
        print(f"‚ùå IntegrityError: {str(e)}")
        return Response({"error": "–û—à–∏–±–∫–∞: –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}, status=status.HTTP_400_BAD_REQUEST)
    except UserProfile.DoesNotExist:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return Response({"error": "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return Response({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(["POST"])
@permission_classes([IsAuthenticated])
def join_organization(request):
    """‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É"""
    code = request.data.get("code")
    
    print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: '{code}'")   #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ 
    try:
        organization = Organization.objects.get(code=code)
    except Organization.DoesNotExist:
        return Response({"error": "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=status.HTTP_404_NOT_FOUND)

    profile = UserProfile.objects.get(user=request.user)
    profile.organization = organization
    profile.role = 'manager'
    profile.save()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
    updated_count = Order.objects.filter(created_by=request.user).update(organization=organization)
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {updated_count}")

    return Response({"message": f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ {organization.name}"}, status=status.HTTP_200_OK)


"""‚úÖ –ü–æ–∫–∏–Ω—É—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é"""
@api_view(["POST"])
@permission_classes([IsAuthenticated])
def leave_organization(request):
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        profile = UserProfile.objects.get(user=request.user)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if not profile.organization:
            return Response({"error": "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"}, status=status.HTTP_400_BAD_REQUEST)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü, –≤—ã—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
        if profile.role == 'owner':
            return Response(
                {
                    "error": "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–ø–∞–Ω–∏–∏. –ü–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑–º–µ–Ω–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é."
                },
                status=status.HTTP_400_BAD_REQUEST
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å: —É–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –º–µ–Ω—è–µ–º —Ä–æ–ª—å
        profile.organization = None
        profile.role = 'individual'  # –¢–µ–ø–µ—Ä—å –æ–Ω —Å–Ω–æ–≤–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        profile.save()

        return Response({"message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏"}, status=status.HTTP_200_OK)

    except UserProfile.DoesNotExist:
        return Response({"error": "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
@api_view(["GET"])
@permission_classes([IsAuthenticated])
def user_info(request):
    """‚úÖ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = UserProfile.objects.get(user=request.user)

    return Response({
        "username": profile.user.username,
        "organization": profile.organization.name if profile.organization else "–ù–µ—Ç",
        "organization_code": profile.organization.code if profile.organization else None,
        "role": profile.role,
        "role_display": profile.get_role_display(),
    })

@api_view(["GET"])
def download_attachment(request, file_path):
    """‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
    try:
        file_path = os.path.join(settings.MEDIA_ROOT, file_path)
        file_name = os.path.basename(file_path)

        response = FileResponse(open(file_path, "rb"), as_attachment=True)
        response["Content-Disposition"] = f'attachment; filename="{urlquote(file_name)}"'
        return response
    except FileNotFoundError:
        raise Http404("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    

   
@api_view(["POST"])
@permission_classes([IsAuthenticated])
def delete_organization(request):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.
    –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –≤–∫–ª—é—á–∞—è –≤–ª–∞–¥–µ–ª—å—Ü–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Ä–æ–ª—å –Ω–∞ 'individual' –∏ organization=None.
    """
    profile = UserProfile.objects.get(user=request.user)

    if not profile.organization:
        return Response({"error": "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"}, status=status.HTTP_400_BAD_REQUEST)

    if profile.role != 'owner':
        return Response({"error": "–£–¥–∞–ª—è—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü"}, status=status.HTTP_403_FORBIDDEN)

    organization = profile.organization
    organization_name = organization.name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
    org_id = organization.id

    # –£–¥–∞–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    organization.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    UserProfile.objects.filter(organization__isnull=True, role__in=['owner', 'manager']).update(role='individual')

    return Response(
        {"message": f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '{organization_name}' —É–¥–∞–ª–µ–Ω–∞. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º 'individual'."},
        status=status.HTTP_200_OK
    )



@api_view(["GET"])
@permission_classes([IsAuthenticated])
def get_my_managers(request):
    """‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    profile = UserProfile.objects.get(user=request.user)

    if not profile.organization:
        return Response([])  # –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º

    managers = User.objects.filter(
        userprofile__organization=profile.organization,
        userprofile__role='manager'
    ).values("id", "username")

    return Response(list(managers))

"""–≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
@api_view(["POST"])
@permission_classes([AllowAny])
def password_reset_request(request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç email –∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
    """
    email = request.data.get("email")
    if not email:
        return Response({"error": "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)

    try:
        user = User.objects.get(email=email)
    except User.DoesNotExist:
        # –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return Response({"message": "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."}, status=status.HTTP_200_OK)

    uid = urlsafe_base64_encode(force_bytes(user.pk))
    token = default_token_generator.make_token(user)
    reset_link = f"{settings.FRONTEND_URL}/password-reset-confirm/{uid}/{token}/"
    
    subject = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
    message = render_to_string("emails/password_reset_email.html", {
        "user": user,
        "reset_link": reset_link,
    })
    
    send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [email])
    
    return Response({"message": "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."}, status=status.HTTP_200_OK)

"""–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ—Å–ª–µ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
@api_view(["POST"])
@permission_classes([AllowAny])
def password_reset_confirm(request, uidb64, token):
    """
    Endpoint –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
    –û–∂–∏–¥–∞–µ—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞:
      - new_password: –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      - confirm_password: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    """
    new_password = request.data.get("new_password")
    confirm_password = request.data.get("confirm_password")

    if not new_password or not confirm_password:
        return Response({"error": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."}, status=status.HTTP_400_BAD_REQUEST)

    if new_password != confirm_password:
        return Response({"error": "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç."}, status=status.HTTP_400_BAD_REQUEST)

    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
    except (TypeError, ValueError, OverflowError, User.DoesNotExist):
        return Response({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}, status=status.HTTP_400_BAD_REQUEST)

    if not default_token_generator.check_token(user, token):
        return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω."}, status=status.HTTP_400_BAD_REQUEST)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    user.set_password(new_password)
    user.save()

    return Response({"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω."}, status=status.HTTP_200_OK)

"""—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
@api_view(["POST"])
@parser_classes([MultiPartParser, FormParser])
@permission_classes([])  # –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
def contact_message(request):
    name = request.data.get("name")
    email = request.data.get("email")
    subject = request.data.get("subject")
    message_body = request.data.get("message")
    attachment = request.FILES.get("attachment")

    if not all([name, email, subject, message_body]):
        return Response({"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, status=status.HTTP_400_BAD_REQUEST)

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
    full_message = (
        f"–û—Ç: {name} <{email}>\n\n"
        f"–¢–µ–º–∞: {subject}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_body}"
    )

    try:
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EmailMessage
        # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è:
        email_message = EmailMessage(
            subject,
            full_message,
            settings.DEFAULT_FROM_EMAIL,
            ['abrarov9@gmail.com']
        )
        if attachment:
            email_message.attach(attachment.name, attachment.read(), attachment.content_type)
        email_message.send()

        return Response({"message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class FurnitureTypeViewSet(viewsets.ModelViewSet):
    serializer_class = FurnitureTypeSerializer
    permission_classes = [IsAuthenticated]
    parser_classes = (MultiPartParser, FormParser, JSONParser)

    def get_queryset(self):
        user_profile = self.request.user.userprofile
        return FurnitureType.objects.filter(organization=user_profile.organization)

    def perform_create(self, serializer):
        serializer.save(organization=self.request.user.userprofile.organization)

    def perform_update(self, serializer):
        instance = self.get_object()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if 'excel_file' not in self.request.FILES and instance.excel_file:
            serializer.validated_data['excel_file'] = instance.excel_file
        serializer.save()

    @action(detail=True, methods=['PATCH'])
    def toggle_purchased(self, request, pk=None):
        furniture = self.get_object()
        furniture.purchased = not furniture.purchased
        furniture.save()
        return Response({
            'id': furniture.id,
            'purchased': furniture.purchased
        })